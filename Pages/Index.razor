@page "/{Selected:guid?}"

@using test.Data
@using Microsoft.EntityFrameworkCore

<CascadingValue Value="@EventCallback.Factory.Create(this, ReloadProject)" IsFixed="@true">
    @Render(Build(Project), Selected)
</CascadingValue>

@code {
    [Inject] public NavigationManager NavMan { get; set; }

    [Parameter] public Guid? Selected { get; set; }
    
    Project Project { get; set; }

    protected override async Task OnInitializedAsync() {
        await ReloadProject();
        
        if( Selected is null ) {
            NavMan.NavigateTo($"{Build(Project).TraverseActive(n => n).Value.Id}");
        }
    }

    async Task ReloadProject() {
        await using var context = new Context();
        Project = await context.Projects
            .Include( p => p.Operations )
            .ThenInclude( o => o.Steps )
            .FirstAsync();
    }

    INode<IProjectItem> Build(Project project) {
        var root = new WorkflowBranch(project, @<h1>@project.Name</h1>, project.Operations.OrderBy(o => o.Ord).Select(BuildOpNode));
        
        return root with { Branches = root.Branches
            .Cast<WorkflowBranch>()
            .Select( n => n with { Fragment = TrackerFragment(root) })
        };
    }

    WorkflowBranch BuildOpNode(Operation op) {
        var opNode = new WorkflowBranch(op, @<div></div>, op.Steps.OrderBy(s => s.Ord).Select( s => new WorkflowLeaf(s, s.Stage, @<div></div>)));
        return opNode with { Branches = opNode.Branches
            .Cast<WorkflowLeaf>()
            .Select( n => n with { Fragment = @<div>@TrackerFragment(opNode) @StepDashFragment(n.Value as Step)</div> })
        };
    }

    RenderFragment TrackerFragment(WorkflowBranch root) => 
        @<div>
            @foreach( var n in root.Branches ) {
                <h2 @onclick="() => Navigate(n)" class="@Bold(Selected, n, root) @StageColor(n)">@n.Value.Name</h2>
            }
        </div>;

    void Navigate(INode<IProjectItem> node) => NavMan.NavigateTo($"/{node.Value.Id}");

    static string Bold(Guid? selected, INode<IProjectItem> node, INode<IProjectItem> root) => node switch { 
        {Value: {} v} when v.Id == selected => "fw-bold",
        IBranch<IProjectItem> b when b.Branches.Any( n => Bold(selected,n, root) is not "" ) => "fw-bold",
        _ when root.Value.Id == selected && root.TraverseActive( n => n.Value.Id == node.Value.Id ) => "fw-bold",
        _ => "" 
    };

    static string StageColor(INode<object> n) => n.Stage switch { 
        ActivityStatus.Active => "text-success",
        ActivityStatus.Complete => "text-black",
        ActivityStatus.Pending => "text-muted" 
    };

    static RenderFragment StepDashFragment(Step? step) => step switch { 
        DrawingStep ds => @<DrawingDash Step="ds" />,
        PaintingStep => @<PaintingDash/>,
        _ => null 
    };

    static RenderFragment Render(INode<IProjectItem> node, Guid? id) => node.Render(n => n.Value.Id == id) ?? node.Render();
}